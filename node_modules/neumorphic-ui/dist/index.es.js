import React, { Component } from 'react';
import PropTypes from 'prop-types';

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = "input::placeholder {\n  color: #b9c2ce;\n  font-weight: 900;\n}";
styleInject(css);

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

var possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

var NeuProgressBar = function (_Component) {
  inherits(NeuProgressBar, _Component);

  function NeuProgressBar() {
    classCallCheck(this, NeuProgressBar);
    return possibleConstructorReturn(this, (NeuProgressBar.__proto__ || Object.getPrototypeOf(NeuProgressBar)).apply(this, arguments));
  }

  createClass(NeuProgressBar, [{
    key: 'render',
    value: function render() {
      var progress = this.props.progress;


      return React.createElement(
        'div',
        { style: {
            position: 'relative',
            width: '100%',
            height: '16px',
            borderRadius: '8px',
            backgroundColor: '#e0e5ec',
            boxShadow: 'rgba(0, 0, 0, 0.05) 9px 9px 9px, rgba(255, 255, 255, 0.5) -9px -9px 9px, rgba(0, 0, 0, 0.05) 4px 4px 4px inset, rgba(255, 255, 255, 0.5) -4px -4px 4px inset',
            marginBottom: '56px' } },
        React.createElement('div', { style: {
            width: progress || '50%',
            height: '16px',
            left: '2px',
            top: '2px',
            borderRadius: '6px',
            backgroundColor: 'rgb(185, 194, 206)'
          } })
      );
    }
  }]);
  return NeuProgressBar;
}(Component);
NeuProgressBar.propTypes = {
  width: PropTypes.string
};

var NeuReaction = function (_Component) {
  inherits(NeuReaction, _Component);

  function NeuReaction(props) {
    classCallCheck(this, NeuReaction);

    var _this = possibleConstructorReturn(this, (NeuReaction.__proto__ || Object.getPrototypeOf(NeuReaction)).call(this, props));

    _this.handleClick = function () {
      _this.setState({
        clicked: !_this.state.clicked
      });
    };

    _this.state = {
      clicked: false
    };
    return _this;
  }

  createClass(NeuReaction, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          size = _props.size,
          children = _props.children;


      return React.createElement(
        'button',
        { onClick: this.handleClick, style: this.state.clicked ? {
            borderRadius: '50%',
            width: size || '70px',
            height: size || '70px',
            border: '0px',
            cursor: 'pointer',
            outline: '0px',
            backgroundColor: '#E0E5EC',
            boxShadow: '9px 9px 16px rgba(0, 0, 0, 0), -9px -9px 16px rgba(247, 251, 255, 0), 9px 9px 16px rgba(0, 0, 0, 0.1) inset, -9px -9px 16px rgba(247, 251, 255, 0.7) inset'
          } : { borderRadius: '100px', textAlign: 'center',
            width: size || '70px',
            height: size || '70px',
            border: '0px',
            cursor: 'pointer',
            outline: '0px',
            backgroundColor: '#E0E5EC',
            boxShadow: '9px 9px 16px rgb(163,177,198,0.6), -9px -9px 16px rgba(255,255,255, 0.5)' } },
        children
      );
    }
  }]);
  return NeuReaction;
}(Component);
NeuReaction.propTypes = {
  size: PropTypes.string
};

var NeuButton = function (_Component) {
  inherits(NeuButton, _Component);

  function NeuButton() {
    classCallCheck(this, NeuButton);
    return possibleConstructorReturn(this, (NeuButton.__proto__ || Object.getPrototypeOf(NeuButton)).apply(this, arguments));
  }

  createClass(NeuButton, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          text = _props.text,
          hovered = _props.hovered,
          clicked = _props.clicked,
          mouseOver = _props.mouseOver,
          mouseOut = _props.mouseOut,
          onClick = _props.onClick;


      return React.createElement(
        'div',
        { style: {
            display: 'block',
            borderRadius: '4px',
            paddingTop: '20px',
            outline: '0',
            fontWeight: '600',
            color: hovered ? '#e0e5ec' : '#b9c2ce',
            paddingBottom: '20px',
            textAlign: 'center',
            border: '0',
            cursor: 'pointer',
            width: '100%',
            backgroundColor: hovered ? '#b9c2ce' : '#E0E5EC',
            boxShadow: clicked ? '9px 9px 16px rgba(0, 0, 0, 0), -9px -9px 16px rgba(247, 251, 255, 0), 9px 9px 16px rgba(0, 0, 0, 0.1) inset, -9px -9px 16px rgba(247, 251, 255, 0.7) inset' : '9px 9px 16px rgb(163,177,198,0.6), -9px -9px 16px rgba(255,255,255, 0.5)'
          }, onMouseOver: mouseOver, onMouseOut: mouseOut, onClick: onClick },
        text
      );
    }
  }]);
  return NeuButton;
}(Component);
NeuButton.propTypes = {
  text: PropTypes.string,
  hovered: PropTypes.bool,
  clicked: PropTypes.bool,
  mouseOver: PropTypes.func,
  mouseOut: PropTypes.func,
  onClick: PropTypes.func
};

var NeuInput = function (_Component) {
  inherits(NeuInput, _Component);

  function NeuInput() {
    classCallCheck(this, NeuInput);
    return possibleConstructorReturn(this, (NeuInput.__proto__ || Object.getPrototypeOf(NeuInput)).apply(this, arguments));
  }

  createClass(NeuInput, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          width = _props.width,
          placeholder = _props.placeholder,
          value = _props.value,
          onChange = _props.onChange;


      return React.createElement(
        'div',
        null,
        React.createElement('input', { style: { borderRadius: '10px',
            outline: '0',
            width: width || 'auto',
            height: '20px',
            padding: '5px',
            fontWeight: '600',
            color: '#a1a9b5',
            paddingLeft: '8px',
            border: '5px solid #e8eef7',
            backgroundColor: 'rgb(224, 229, 236,0.6)',
            boxShadow: 'inset 3px 3px 3px rgba(163,177,198, 0.7),inset -3px -3px 4px rgba(255, 255, 255, 0.5), 9px 9px 16px rgb(163,177,198,0.6)' }, placeholder: placeholder || "", value: value, onChange: onChange })
      );
    }
  }]);
  return NeuInput;
}(Component);
NeuInput.propTypes = {
  width: PropTypes.string,
  placeholder: PropTypes.string,
  value: PropTypes.string,
  onChange: PropTypes.func
};

var NeuCard = function (_Component) {
  inherits(NeuCard, _Component);

  function NeuCard() {
    classCallCheck(this, NeuCard);
    return possibleConstructorReturn(this, (NeuCard.__proto__ || Object.getPrototypeOf(NeuCard)).apply(this, arguments));
  }

  createClass(NeuCard, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          width = _props.width,
          height = _props.height;


      return React.createElement(
        'div',
        { style: {
            borderRadius: '4px',
            padding: '20px',
            textAlign: 'center',
            height: height || '15px',
            width: width || '100%',
            backgroundColor: '#E0E5EC',
            boxShadow: '9px 9px 16px rgb(163,177,198,0.6), -9px -9px 16px rgba(255,255,255, 0.5)'
          } },
        children
      );
    }
  }]);
  return NeuCard;
}(Component);
NeuCard.propTypes = {
  width: PropTypes.string,
  height: PropTypes.string
};

var NeuHeading = function (_Component) {
  inherits(NeuHeading, _Component);

  function NeuHeading() {
    classCallCheck(this, NeuHeading);
    return possibleConstructorReturn(this, (NeuHeading.__proto__ || Object.getPrototypeOf(NeuHeading)).apply(this, arguments));
  }

  createClass(NeuHeading, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          text = _props.text,
          fontSize = _props.fontSize,
          fontWeight = _props.fontWeight;


      return React.createElement(
        'div',
        { style: {
            borderRadius: '7px solid white',
            width: '100%',
            display: 'inline-block',
            marginBottom: fontSize,
            wordWrap: 'break-word',
            fontSize: fontSize || '100px',
            fontWeight: fontWeight || '900',
            color: '#E0E5EC',
            textShadow: '3px 3px 9px rgb(163,177,198,0.6)'
          } },
        text
      );
    }
  }]);
  return NeuHeading;
}(Component);
NeuHeading.propTypes = {
  fontSize: PropTypes.string,
  fontWeight: PropTypes.string,
  text: PropTypes.string
};

export { NeuHeading, NeuCard, NeuInput, NeuButton, NeuReaction, NeuProgressBar };
//# sourceMappingURL=index.es.js.map
